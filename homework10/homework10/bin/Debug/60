<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="origin-when-crossorigin" />
    <meta name="description" content="Stream消息驱动 概述 屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型 官网：https://cloud.spring.io/spring-cloud-static/spring-cl" />
    <meta property="og:description" content="Stream消息驱动 概述 屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型 官网：https://cloud.spring.io/spring-cloud-static/spring-cl" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>SpringCloud（七）Stream消息驱动 - Odousang - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/custom/bundle-custom.min.css?v=URnzNOcYasaxFfc79Balq6aK60x2WaH4sa2e1Ty6OO4" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/hewenhao-blogs/custom.css?v=ZPQsa1&#x2B;SLEXaDDb/SRb8owO31YQ=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/custom/bundle-custom-mobile.min.css?v=OayYBbtUbH4FYkn_bTL4VVf4DsEOiTHSWhbl11KyY6Y" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/hewenhao-blogs/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/hewenhao-blogs/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/hewenhao-blogs/wlwmanifest.xml" />
    <script>
        var currentBlogId = 605064;
        var currentBlogApp = 'hewenhao-blogs';
        var cb_enable_mathjax = false;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'Custom';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2021-05-05 11:47';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=yJQaJ16S00coMfzvh-NgF2zm2J87f5VfNamFdsnKHrc"></script>
    
    
    
</head>
<body class="no-navbar">
    <a name="top"></a>
    <div id="top_nav" class="navbar forpc navbar-custom">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    <div id="page_begin_html">
        

    </div>
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/hewenhao-blogs/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/hewenhao-blogs/">十七</a>
</h1>
<h2></h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/hewenhao-blogs/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/Odousang">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/hewenhao-blogs/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/hewenhao-blogs/p/14733422.html">
    <span>SpringCloud（七）Stream消息驱动</span>
    



</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                    <div id="cnblogs_post_description" style="display: none">
        <img src="https://img2020.cnblogs.com/blog/2042950/202105/2042950-20210505173720367-599769868.png" class="desc_img">
    </div>
<div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<h2 id="stream消息驱动">Stream消息驱动</h2>
<h3 id="概述">概述</h3>
<p>屏蔽底层消息中间件的差异，降低切换成本，统一消息的编程模型<br>
官网：<a href="https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.4.RELEASE/reference/html/" target="_blank">https://cloud.spring.io/spring-cloud-static/spring-cloud-stream/3.0.4.RELEASE/reference/html/</a></p>
<p>官方定义Spring Cloud Stream是一个<strong>构建消息驱动微服务的框架</strong><br>
应用程序通过 inputs 或者 outputs 来与Spring Cloud Stream中的 binder对象交互，通过配置来binding（绑定），而 Spring Cloud Stream 的 <strong>binder 对象负责与消息中间件交互</strong>，所以，我们只需要搞清楚如何与Spring Cloud Stream交互就可以方便使用消息驱动的方式<br>
<strong>通过使用Spring Integration来连接消息代理中间件以实现消息事件驱动</strong><br>
Spring Cloud Stream是用于构建与共享消息传递系统连接的高度可伸缩的事件驱动微服务框架，该框架提供了一个灵活的编程模型，它建立在已建立和熟悉的Spring和最佳实践上，包括支持<strong>持久化的发布/订阅、消费组以及消息分区</strong>这三个核心概念</p>
<p>目前仅支持<strong>RabbitMQ、Kafka</strong><br>
<img src="https://img2020.cnblogs.com/blog/2042950/202105/2042950-20210505163257196-17459165.png" alt="" loading="lazy"></p>
<h3 id="设计思想">设计思想</h3>
<h4 id="标准mq">标准MQ</h4>
<p><img src="https://img2020.cnblogs.com/blog/2042950/202105/2042950-20210505173720367-599769868.png" alt="" loading="lazy"></p>
<p>生产者/消费者之间靠<strong>消息媒介（Message）</strong>传递信息内容<br>
消息必须走特定的通道<strong>（消息通道MessageChannel）</strong><br>
消息通道里的消息如何被消费呢，谁负责<strong>收发处理</strong>：<strong>消息通道MessageChannel的子接口SubscribableChannel，由MessageHandler消息处理器所订阅</strong></p>
<h4 id="使用原因">使用原因</h4>
<p>比方说我们用到了RabbitMQ和Kafka，由于这两个消息中间件的架构上的不同，像RabbitMQ有exchange，kafka有Topic和Partitions分区<br>
这些中间件的差异性导致我们实际项目开发给我们造成了一定的困扰，我们如果用了两个消息队列的其中一种，后面的业务需求，我想往另外一种消息队列进行迁移，这时候无疑就是一个灾难性的，一大堆东西都要重新推倒重新做，因为它跟我们的系统耦合了，这时候<strong>springcloud Stream给我们提供了一种解耦合的方式</strong><br>
在没有绑定器这个概念的情况下，我们的SpringBoot应用要直接与消息中间件进行信息交互的时候，由于各消息中间件构建的初衷不同，它们的实现细节上会有较大的差异性<br>
<strong>通过定义绑定器 Binder 作为中间层，实现了应用程序与消息中间件细节之间的隔离</strong><br>
<strong>通过向应用程序暴露统一的 Channel 通道，使得应用程序不需要再考虑各种不同的消息中间件实现</strong><br>
Stream中的消息通信方式<strong>遵循了发布-订阅模式，Topic主题进行广播</strong>，在RabbitMQ就是Exchange，在Kafka中就是Topic</p>
<h3 id="基本流程">基本流程</h3>
<ul>
<li><strong>Binder</strong>：很方便的连接中间件，屏蔽差异</li>
<li><strong>Channel</strong>：通道，是队列Queue的一种抽象，在消息通讯系统中就是实现存储和转发的媒介，通过Channel对队列进行配置</li>
<li><strong>Source和Sink</strong>：简单的可理解为参照对象是Spring Cloud Stream自身，从Stream发布消息就是输出，接受消息就是输入</li>
</ul>
<h3 id="常用api和注解">常用API和注解</h3>
<ul>
<li><strong>Middleware</strong>：中间件，目前只支持RabbitMQ和Kafka</li>
<li><strong>Binder</strong>：Binder是应用与消息中间件之间的封装，目前实行了Kafka和RabbitMQ的Binder，通过Binder可以很方便的连接中间件，<strong>可以动态的改变消息类型（对应于Kafka的topic，RabbitMQ的exchange）</strong>，这些都可以通过配置文件来实现</li>
<li><strong>@Input</strong>：注解标识输入通道，通过该输入通道接收到的消息进入应用程序</li>
<li><strong>@Output</strong>：注解标识输出通道，发布的消息将通过该通道离开应用程序</li>
<li><strong>@StreamListener</strong>：监听队列，用于消费者的队列的消息接收</li>
<li><strong>@EnableBinding</strong>：指信道channel和exchange绑定在一起</li>
</ul>
<h3 id="基本构建">基本构建</h3>
<p>新建三个子模块，一个作为生产者进行发送消息模块，两个作为消息接收模块</p>
<h4 id="服务端">服务端</h4>
<ol>
<li>导入 pom 依赖</li>
</ol>
<pre><code>&lt;!-- spring-cloud-starter-stream-rabbit --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-stream-rabbit&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<ol start="2">
<li>修改 yml 配置文件</li>
</ol>
<pre><code>server:
  port: 8801

spring:
  application:
    name: stream-rabbitmq-provider
  cloud:
    stream:
      # 配置要绑定的 rabbitmq 的服务信息
      binders:
        # 表示定义的名称，用于与 binding 整合
        defaultRabbit:
          # 消息组件类型
          type: rabbit
          # 设置 rabbitmq 相关配置环境
          enviroment:
            spring:
              rabbitmq:
                host: localhost
                port: 5672
                username: admin
                password: 123456
      # 服务整合处理
      bindings:
        # 通道名称
        output:
          # 表示要使用的 Exchange 名称定义
          destination: studyExchange
          # 设置消息类型，本次为为 json，文本则设置“text/plain”
          content-type: application/json
            binder: defaultRabbit
</code></pre>
<ol start="3">
<li>业务类<br>
发送消息的接口</li>
</ol>
<pre><code>public interface MessageProvider {
    /**
     * 消息发送
     *  @return ：返回值
     */
    Message&lt;?&gt; send();
}
</code></pre>
<p>发送消息接口的实现类</p>
<pre><code>@EnableBinding(Source.class)
public class MessageProviderImpl implements MessageProvider {

    /**
     * @ InboundChannelAdapter
     * 作用：表示定义的方法能产生消息
     * fixedDelay：多少毫秒发送1次
     */
    @Override
    @InboundChannelAdapter(channel = Source.OUTPUT,poller = @Poller(fixedDelay = "10000"))  // 每隔10秒发送一次
    public Message&lt;String&gt; send() {
        String serial = UUID.randomUUID().toString();
        return MessageBuilder.withPayload(serial)
                .build();
    }
}
</code></pre>
<p><img src="https://img2020.cnblogs.com/blog/2042950/202105/2042950-20210505173703583-970794720.png" alt="" loading="lazy"></p>
<p>Controller 层</p>
<pre><code>@RestController
public class SendMessageController {

    @Resource
    private MessageProvider provider;

    @GetMapping(value = "/senMessage")
    public Message senMessage(){
        return provider.send();
    }
}
</code></pre>
<p><img src="https://img2020.cnblogs.com/blog/2042950/202105/2042950-20210505225112199-841569644.png" alt="" loading="lazy"></p>
<h4 id="消费者">消费者</h4>
<ol>
<li>导入 pom 依赖</li>
</ol>
<pre><code>&lt;!-- spring-cloud-starter-stream-rabbit --&gt;
&lt;dependency&gt;
    &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;
    &lt;artifactId&gt;spring-cloud-starter-stream-rabbit&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre>
<ol start="2">
<li>修改 yml 配置文件</li>
</ol>
<pre><code># 服务整合处理
bindings:
  # 通道名称
  input:
    # 表示要使用的 Exchange 名称定义
    destination: studyExchange
    # 设置消息类型，本次为为 json，文本则设置“text/plain”
    content-type: application/json
    binder: defaultRabbit
</code></pre>
<ol start="3">
<li>业务类</li>
</ol>
<pre><code>@RestController
public class SendMessageController {

    @Resource
    private MessageProvider provider;

    @GetMapping(value = "/senMessage")
    public Message senMessage(){
        return provider.send();
    }
}
</code></pre>
<p><img src="https://img2020.cnblogs.com/blog/2042950/202105/2042950-20210505232022210-450558845.png" alt="" loading="lazy"></p>
<h4 id="分组消费和持久化">分组消费和持久化</h4>
<p>当使用两个消费者来进行接收消息时，会出现两个问题：<strong>重复消费和消息持久化的问题</strong></p>
<h5 id="重复消费">重复消费</h5>
<p>目前是8802/8803同时都收到了，存在重复消费问题<br>
<img src="https://img2020.cnblogs.com/blog/2042950/202105/2042950-20210505232632679-437542369.png" alt="" loading="lazy"><br>
<img src="https://img2020.cnblogs.com/blog/2042950/202105/2042950-20210505232637742-199294342.png" alt="" loading="lazy"></p>
<p>解决方法：分组和持久化属性Group<br>
比如在如下场景中，订单系统我们做集群部署，都会从RabbitMQ中获取订单信息<br>
那如果<strong>一个订单同时被两个服务获取到，那么就会造成数据错误</strong>，为了避免这种情况这时我们就可以使用Stream中的消息分组来解决<br>
<img src="https://img2020.cnblogs.com/blog/2042950/202105/2042950-20210505232808735-1275853991.png" alt="" loading="lazy"></p>
<p>注意在Stream中处于<strong>同一个group中的多个消费者是竞争关系，就能够保证消息只会被其中一个应用消费一次，不同组是可以全面消费的（重复消费），同一组内会发生竞争关系，只有其中一个可以消费</strong></p>
<h5 id="分组">分组</h5>
<p><strong>微服务应用放置于同一个group中，就能够保证消息只会被其中一个应用消费一次</strong>。<strong>不同的组是可以消费的，同一个组内会发生竞争关系，只有其中一个可以消费</strong><br>
自定义分组<br>
修改消费者的 yml 文件，新增一个 <strong>group</strong> 的属性</p>
<pre><code># 服务整合处理
bindings:
  # 通道名称
  input:
    # 表示要使用的 Exchange 名称定义
    destination: studyExchange
    # 设置消息类型，本次为为 json，文本则设置“text/plain”
    content-type: application/json
    binder: defaultRabbit
   group: Consumer
</code></pre>
<p>分布式微服务应用为了实现高可用和负载均衡，实际上都会部署多个实例，这里举例实现两个消费微服务<br>
多数情况，生产者发送消息给某个具体微服务时只希望被消费一次，按照上面启动两个应用的例子，虽然它们同属一个应用，但是这个消息出现了被重复消费两次的情况。为了解决这个问题，在Spring Cloud Stream中提供了<strong>消费组的概念</strong><br>
实现轮询分组，每次只有一个消费者，生产者发送的消息只能被一个消费者接收到，避免重复消费</p>
<p>将案例的<strong>两个消费者变成相同组</strong><br>
同一个组的多个微服务实例，每次只会有一个拿到<br>
<img src="https://img2020.cnblogs.com/blog/2042950/202105/2042950-20210505234407300-1401841865.png" alt="" loading="lazy"><br>
<img src="https://img2020.cnblogs.com/blog/2042950/202105/2042950-20210505234517084-686739791.png" alt="" loading="lazy"></p>
<h5 id="持久化">持久化</h5>
<p>配置好 group 这个属性后可以发现<br>
当消费者发生一些错误停止服务时，但是此时的生产者还在不断的发送消息，如果消费者没有配置 group ，那么这些消息就被错过了<br>
当配置好 group 这个属性，消费者就算发生一些错误停止服务，再启动时，就会获取到之前停止服务期间生产者发来的消息</p>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2021-05-05 23:47</span>&nbsp;
<a href="https://www.cnblogs.com/hewenhao-blogs/">Odousang</a>&nbsp;
阅读(<span id="post_view_count">5</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14733422" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(14733422);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 605064, cb_blogApp = 'hewenhao-blogs', cb_blogUserGuid = '116cdb0b-e869-4054-243f-08d7fbd22d6e';
    var cb_entryId = 14733422, cb_entryCreatedDate = '2021-05-05 23:47', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
<a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 Odousang
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    <div id="page_end_html">
        
<!--放大图片-->
<link rel="stylesheet" type="text/css" href="https://blog-static.cnblogs.com/files/zouwangblog/zoom.css">
<script src="https://cdn.bootcss.com/jquery/1.8.3/jquery.min.js"></script>
<script src="https://cdn.bootcss.com/bootstrap/3.2.0/js/transition.js"></script>
<script src="https://blog-static.cnblogs.com/files/zouwangblog/zoom.js"></script>
<script type='text/javascript'>$('#cnblogs_post_body img').attr('data-action', 'zoom');</script>
<!--放大图片end-->

<!-- Music-->
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/aplayer@1.10.0/dist/APlayer.min.css">
<script src="https://blog-static.cnblogs.com/files/zouwangblog/APlayer.min.js"></script>
<script src="https://unpkg.com/meting@1.2/dist/Meting.min.js"></script>
<div id="player" class="aplayer aplayer-withlist aplayer-fixed" data-id="2878443703" data-server="netease" data-type="playlist" data-order="random" data-fixed="true" data-listfolded="true" data-theme="orange"></div>
<!-- Music end -->


<!--顶部加载条-->
<link rel="stylesheet" href="https://blog-static.cnblogs.com/files/zouwangblog/nprogress.css">
<script src="https://blog-static.cnblogs.com/files/zouwangblog/nprogress.js"></script>
<script>
NProgress.start();
NProgress.done();
</script>
    </div>

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjsAySpvY1dy1vTACH56sRUrms73uSuiDDI0GwX-SfSznRrLD8AWsL26BsHmExa6vWdqcPTPrtancfc97B49ASVR4Lgg7IVn0253WgRI4l4jejuNxdIWUxvf6ybDHWq3Sgk" />
</body>
</html>
