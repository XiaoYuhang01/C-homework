<!DOCTYPE html>
<html lang="zh-cn">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="referrer" content="never" />
    <meta name="description" content="作者：小傅哥 博客：https://bugstack.cn 沉淀、分享、成长，让自己和他人都能有所收获！&amp;amp;#128516; 一、前言 延迟满足能给你带来什么？ 大学有四年时间，但几乎所有人都是" />
    <meta property="og:description" content="作者：小傅哥 博客：https://bugstack.cn 沉淀、分享、成长，让自己和他人都能有所收获！&amp;amp;#128516; 一、前言 延迟满足能给你带来什么？ 大学有四年时间，但几乎所有人都是" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta http-equiv="Cache-Control" content="no-siteapp" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <title>展开说说，Spring Bean IOC、AOP 循环依赖 - 小傅哥 - 博客园</title>
    <link id="favicon" rel="shortcut icon" href="//common.cnblogs.com/favicon.svg" type="image/svg+xml" />
    
    <link rel="stylesheet" href="/css/blog-common.min.css?v=zS6-e1bxywlu3kpHvpr1J6MySwya3ztFtEnS7RYQ0Fk" />
    <link id="MainCss" rel="stylesheet" href="/skins/simplememory/bundle-simplememory.min.css?v=uknaX_hejnSu-njQgx4Hj1R0JiPLwUhFPUlwWNmWyB4" />
    <link type="text/css" rel="stylesheet" href="https://www.cnblogs.com/xiaofuge/custom.css?v=35SGhmOToQFr38Xu&#x2B;yKNf3geTag=" />
    <link id="mobile-style" media="only screen and (max-width: 767px)" type="text/css" rel="stylesheet" href="/skins/SimpleMemory/bundle-SimpleMemory-mobile.min.css" />
    
    <link type="application/rss+xml" rel="alternate" href="https://www.cnblogs.com/xiaofuge/rss" />
    <link type="application/rsd+xml" rel="EditURI" href="https://www.cnblogs.com/xiaofuge/rsd.xml" />
    <link type="application/wlwmanifest+xml" rel="wlwmanifest" href="https://www.cnblogs.com/xiaofuge/wlwmanifest.xml" />
    <script>
        var currentBlogId = 601977;
        var currentBlogApp = 'xiaofuge';
        var cb_enable_mathjax = true;
        var isLogined = false;
        var isBlogOwner = false;
        var skinName = 'SimpleMemory';
        var visitorUserId = '';
    </script>
        <script>
            var currentPostDateAdded = '2021-05-06 08:13';
        </script>
    <script src="https://common.cnblogs.com/scripts/jquery-2.2.0.min.js"></script>
    <script src="/js/blog-common.min.js?v=yJQaJ16S00coMfzvh-NgF2zm2J87f5VfNamFdsnKHrc"></script>
    <script type="text/x-mathjax-config">
        MathJax.Hub.Config({
        tex2jax: { inlineMath: [['$','$'], ['\\(','\\)']], processClass: 'math', processEscapes: true },
        TeX: {
        equationNumbers: { autoNumber: ['AMS'], useLabelIds: true },
        extensions: ['extpfeil.js', 'mediawiki-texvc.js'],
        Macros: {bm: "\\boldsymbol"}
        },
        'HTML-CSS': { linebreaks: { automatic: true } },
        SVG: { linebreaks: { automatic: true } }
        });
    </script>
    <script src="https://mathjax.cnblogs.com/2_7_5/MathJax.js?config=TeX-AMS-MML_HTMLorMML&amp;v=20200504"></script>
    
</head>
<body class="no-navbar">
    <a name="top"></a>
    <div id="top_nav" class="navbar forpc navbar-custom">
        <nav id="nav_main" class="navbar-main">
            <ul id="nav_left" class="navbar-list navbar-left">
                <li class="navbar-branding"><a href="https://www.cnblogs.com/" title="开发者的网上家园"><img src="/images/logo.svg?v=R9M0WmLAIPVydmdzE2keuvnjl-bPR7_35oHqtiBzGsM" alt="博客园Logo" /></a></li>
                <li><a href="/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-sitehome')">首页</a></li>
                <li><a href="https://news.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-news')">新闻</a></li>
                <li><a href="https://q.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-q')">博问</a></li>
                <li><a id="nav_brandzone" href="https://brands.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-brands')">专区</a></li>
                <li><a href="https://ing.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-ing')">闪存</a></li>
                <li><a href="https://edu.cnblogs.com/" onclick="ga('send', 'event', 'Link', 'click', 'skin-navbar-edu')">班级</a></li>
            </ul>
            <ul id="nav_right" class="navbar-list navbar-right">
                <li>
                    <form id="zzk_search" class="navbar-search" action="https://zzk.cnblogs.com/s" method="get">
                        <input name="w" id="zzk_search_input" placeholder="代码改变世界" type="text" tabindex="3" />
                        <button type="submit" id="zzk_search_button">
                            <img src="/images/aggsite/search.svg" alt="搜索" />
                        </button>
                    </form>
                </li>
                <li id="navbar_login_status" class="navbar-list">
                    <a class="navbar-user-info navbar-blog" href="https://i.cnblogs.com/EditPosts.aspx?opt=1" alt="写随笔" title="写随笔">
                        <img id="new_post_icon" class="navbar-icon" src="/images/aggsite/newpost.svg" alt="写随笔" />
                    </a>
                    <a id="navblog-myblog-icon" class="navbar-user-info navbar-blog" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx" alt="我的博客" title="我的博客">
                        <img id="myblog_icon" class="navbar-icon" src="/images/aggsite/myblog.svg" alt="我的博客" />
                    </a>
                    <a class="navbar-user-info navbar-message navbar-icon-wrapper" href="https://msg.cnblogs.com/" alt="短消息" title="短消息">
                        <img id="msg_icon" class="navbar-icon" src="/images/aggsite/message.svg?v=J0WS2P2iPgaIVgXxcAhliw4AFZIpaTWxtdoNAv9eiCA" alt="短消息" />
                        <span id="msg_count" style="display: none"></span>
                    </a>
                    <div id="user_info" class="navbar-user-info dropdown">
                        <a class="dropdown-button" href="https://home.cnblogs.com/">
                            <img id="user_icon" class="navbar-avatar" src="/images/aggsite/avatar-default.svg" alt="用户头像" />
                        </a>
                        <div class="dropdown-menu">
                            <a id="navblog-myblog-text" href="https://passport.cnblogs.com/GetBlogApplyStatus.aspx">我的博客</a>
                            <a href="https://home.cnblogs.com/">我的园子</a>
                            <a href="https://account.cnblogs.com/settings/account">账号设置</a>
                            <a href="javascript:void(0)" id="navbar_lite_mode_toggle" title="简洁模式会使用简洁款皮肤显示所有博客">
    简洁模式 <img id="navbar_lite_mode_on" src="/images/lite-mode-check.svg" class="hide" /><span id="navbar_lite_mode_spinner" class="hide">...</span>
</a>
                            <a href="javascript:void(0)" onclick="account.logout();">退出登录</a>
                        </div>
                    </div>
                    <a class="navbar-anonymous" href="https://account.cnblogs.com/signup/">注册</a>
                    <a class="navbar-anonymous" href="javascript:void(0);" onclick="account.login()">登录</a>
                </li>
            </ul>
        </nav>
    </div>

    
    <!--done-->
<div id="home">
<div id="header">
	<div id="blogTitle">
        <a id="lnkBlogLogo" href="https://www.cnblogs.com/xiaofuge/"><img id="blogLogo" src="/skins/custom/images/logo.gif" alt="返回主页" /></a>		
		
<!--done-->
<h1><a id="Header1_HeaderTitle" class="headermaintitle HeaderMainTitle" href="https://www.cnblogs.com/xiaofuge/">小傅哥</a>
</h1>
<h2><a href="https://github.com/fuzhengwei/CodeGuide/wiki" target="_blank">CodeGuide | 程序员编码指南 Go!</a> - 沉淀、分享、成长，让自己和他人都能有所收获！</h2>




		
	</div><!--end: blogTitle 博客的标题和副标题 -->
	<div id="navigator">
		
<ul id="navList">
<li><a id="blog_nav_sitehome" class="menu" href="https://www.cnblogs.com/">
博客园</a>
</li>
<li>
<a id="blog_nav_myhome" class="menu" href="https://www.cnblogs.com/xiaofuge/">
首页</a>
</li>
<li>

<a id="blog_nav_newpost" class="menu" href="https://i.cnblogs.com/EditPosts.aspx?opt=1">
新随笔</a>
</li>
<li>
<a id="blog_nav_contact" class="menu" href="https://msg.cnblogs.com/send/%E5%B0%8F%E5%82%85%E5%93%A5">
联系</a></li>
<li>
<a id="blog_nav_rss" class="menu" href="javascript:void(0)" data-rss="https://www.cnblogs.com/xiaofuge/rss/">
订阅</a>
<!--<partial name="./Shared/_XmlLink.cshtml" model="Model" /></li>--></li>
<li>
<a id="blog_nav_admin" class="menu" href="https://i.cnblogs.com/">
管理</a>
</li>
</ul>


		<div class="blogStats">
			<div id="blog_stats_place_holder"><script>loadBlogStats();</script></div>
		</div><!--end: blogStats -->
	</div><!--end: navigator 博客导航栏 -->
</div><!--end: header 头部 -->
<div id="main">
	<div id="mainContent">
	<div class="forFlow">
		<div id="post_detail">
    <!--done-->
    <div id="topics">
        <div class="post">
            <h1 class = "postTitle">
                
<a id="cb_post_title_url" class="postTitle2 vertical-middle" href="https://www.cnblogs.com/xiaofuge/p/14733687.html">
    <span>展开说说，Spring Bean IOC、AOP 循环依赖</span>
    



</a>

            </h1>
            <div class="clear"></div>
            <div class="postBody">
                <div id="cnblogs_post_body" class="blogpost-body cnblogs-markdown">
<p><img src="https://img2020.cnblogs.com/blog/2030202/202105/2030202-20210506081234389-1608425144.jpg" alt="" loading="lazy"></p>
<p>作者：小傅哥<br>
博客：<a href="https://bugstack.cn" target="_blank">https://bugstack.cn</a></p>
<blockquote>
<p>沉淀、分享、成长，让自己和他人都能有所收获！😄</p>
</blockquote>
<h2 id="一、前言">一、前言</h2>
<p><code>延迟满足能给你带来什么？</code></p>
<p>大学有四年时间，但几乎所有人都是临近毕业才发现找一份好工作费劲，尤其是我能非常熟悉的软件开发行业，即使是毕业了还需要额外花钱到培训机构，在学一遍编程技术才能出去找工作。<em>好像在校这几年压根就没学到什么！</em></p>
<p>就我个人而言可能是因为上学期间喜欢编程，也从师哥、师姐那里听到一些关于毕业后找工作的不容易，也了解了一些社会上对程序员开发技能的要求级别。也就是得到了这些消息，又加上自己乐于折腾，我给自己定了一个每天都能完成的小目标：</p>
<pre><code class="language-java">红尘世界几个王，我自不服迎头上。
日敲代码两百行，冲进世界五百强。
</code></pre>
<p><strong>哈哈哈</strong>，就这么每天两百行代码，一个月就是6千行，一年就是6万行，三年后开始实习就有18万行，一个应届实习生有将近20万行代码的敲击量，几乎已经可以非常熟练的完成各类简单的工作，在加上实习中对整个项目流程真正的断链后，找一个<code>正经</code>的开发工作，还是很容易的。</p>
<p>而这时候找工作的容易，就来自于你一直以来的学习和沉淀，但如果你没经过这些努力，可能等毕业后就会变得非常慌乱，最后没办法只能去一些机构再学习一遍。</p>
<h2 id="二、面试题">二、面试题</h2>
<p><code>谢飞机，小记！</code>，以前感觉Spring没啥，看过一篇getBean，我的天！</p>
<p><strong>谢飞机</strong>：面试官，最近我看了 Spring 的 getBean 发现这里好多东西，还有一个是要解决循环依赖的，这玩意面试有啥要问的吗？</p>
<p><strong>面试官</strong>：有哇，Spring 是如何解决循环依赖的？</p>
<p><strong>谢飞机</strong>：嗯，通过三级缓存提前暴露对象解决的。</p>
<p><strong>面试官</strong>：可以哈，那这三个缓存里都存放了什么样的对象信息呢？</p>
<p><strong>谢飞机</strong>：一级缓存存放的是完整对象，也叫成品对象。二级缓存存放的是半成品对象，就是那些属性还没赋值的对象。三级缓存存放的是 <code>ObjectFactory&lt;?&gt;</code> 类型的 lambda 表达式，就是这用于处理 AOP 循环依赖的。</p>
<p><strong>面试官</strong>：可以呀，谢飞机有所准备嘛！那如果没有三级缓存，只有二级或者一级，能解决循环依赖吗？</p>
<p><strong>谢飞机</strong>：其实我看过资料了，可以解决，只不过 Spring 要保证几个事情，只有一级缓存处理流程没法拆分，复杂度也会增加，同时半成品对象可能会有空指针异常。而将半成品与成品对象分开，处理起来也更加优雅、简单、易扩展。另外 Spring 的两大特性中不仅有 IOC 还有 AOP，也就是基于字节码增强后的方法，该存放到哪，而三级缓存最主要，要解决的循环依赖就是对 AOP 的处理，但如果把 AOP 代理对象的创建提前，那么二级缓存也一样可以解决。但是，这就违背了 Spring 创建对象的原则，Spring 更喜欢把所有的普通 Bean 都初始化完成，在处理代理对象的初始化。</p>
<p><strong>面试官</strong>：飞机，不错嘛，这次了解了不少。那问个简单的，你撸过循环依赖的解决方案？</p>
<p><strong>谢飞机</strong>：哦哦，这没有，没实践过！！！确实应该搞一下，试试。</p>
<h2 id="三、什么是循环依赖？">三、什么是循环依赖？</h2>
<h3 id="1-问题描述">1. 问题描述</h3>
<p>了解问题的本质再分析问题，往往更利于对问题有更深入的了解和研究。所以我们在分析 Spring 关于循环依赖的源码之前，先要了解下什么是循环依赖。</p>
<p><img src="https://bugstack.cn/assets/images/2020/interview/interview-31-1.png" alt="" loading="lazy"></p>
<ul>
<li>循环依赖分为三种，自身依赖于自身、互相循环依赖、多组循环依赖。</li>
<li>但无论循环依赖的数量有多少，循环依赖的本质是一样的。就是你的完整创建依赖于我，而我的完整创建也依赖于你，但我们互相没法解耦，最终导致依赖创建失败。</li>
<li>所以 Spring 提供了除了构造函数注入和原型注入外的，setter循环依赖注入解决方案。那么我们也可以先来尝试下这样的依赖，如果是我们自己处理的话该怎么解决。</li>
</ul>
<h3 id="2-问题体现">2. 问题体现</h3>
<pre><code class="language-java">public class ABTest {

    public static void main(String[] args) {
        new ClazzA();
    }

}

class ClazzA {

    private ClazzB b = new ClazzB();

}

class ClazzB {

    private ClazzA a = new ClazzA();

}
</code></pre>
<ul>
<li>这段代码就是循环依赖最初的模样，你中有我，我中有你，运行就报错 <code>java.lang.StackOverflowError</code></li>
<li>这样的循环依赖代码是没法解决的，当你看到 Spring 中提供了 get/set 或者注解，这样之所以能解决，首先是进行了一定的解耦。让类的创建和属性的填充分离，先创建出半成品Bean，再处理属性的填充，完成成品Bean的提供。</li>
</ul>
<h3 id="3-问题处理">3. 问题处理</h3>
<p>在这部分的代码中就一个核心目的，我们来自己解决一下循环依赖，方案如下：</p>
<pre><code class="language-java">public class CircleTest {

    private final static Map&lt;String, Object&gt; singletonObjects = new ConcurrentHashMap&lt;&gt;(256);

    public static void main(String[] args) throws Exception {
        System.out.println(getBean(B.class).getA());
        System.out.println(getBean(A.class).getB());
    }

    private static &lt;T&gt; T getBean(Class&lt;T&gt; beanClass) throws Exception {
        String beanName = beanClass.getSimpleName().toLowerCase();
        if (singletonObjects.containsKey(beanName)) {
            return (T) singletonObjects.get(beanName);
        }
        // 实例化对象入缓存
        Object obj = beanClass.newInstance();
        singletonObjects.put(beanName, obj);
        // 属性填充补全对象
        Field[] fields = obj.getClass().getDeclaredFields();
        for (Field field : fields) {
            field.setAccessible(true);
            Class&lt;?&gt; fieldClass = field.getType();
            String fieldBeanName = fieldClass.getSimpleName().toLowerCase();
            field.set(obj, singletonObjects.containsKey(fieldBeanName) ? singletonObjects.get(fieldBeanName) : getBean(fieldClass));
            field.setAccessible(false);
        }
        return (T) obj;
    }

}

class A {

    private B b;

    // ...get/set
}

class B {
    private A a;

		// ...get/set
}
</code></pre>
<ul>
<li>
<p>这段代码提供了 A、B 两个类，互相有依赖。但在两个类中的依赖关系使用的是 setter 的方式进行填充。也就是只有这样才能避免两个类在创建之初不非得强依赖于另外一个对象。</p>
</li>
<li>
<p><code>getBean</code>，是整个解决循环依赖的核心内容，A 创建后填充属性时依赖 B，那么就去创建 B，在创建 B 开始填充时发现依赖于 A，但此时 A 这个半成品对象已经存放在缓存到<code>singletonObjects</code> 中了，所以 B 可以正常创建，在通过递归把 A 也创建完整了。</p>
<p><img src="https://bugstack.cn/assets/images/2020/interview/interview-31-2.png" alt="" loading="lazy"></p>
</li>
</ul>
<h2 id="四、源码分析">四、源码分析</h2>
<h3 id="1-说说细节">1. 说说细节</h3>
<p>通过上面的例子我们大概了解到，A和B互相依赖时，A创建完后填充属性B，继续创建B，再填充属性A时就可以从缓存中获取了，如下：</p>
<p><img src="https://bugstack.cn/assets/images/2020/interview/interview-31-3.png" alt="" loading="lazy"></p>
<p>那这个解决事循环依赖的事放到 Spring 中是什么样呢？展开细节！</p>
<p><img src="https://bugstack.cn/assets/images/2020/interview/interview-31-4.png" alt="" loading="lazy"></p>
<p><strong>虽然</strong>，解决循环依赖的核心原理一样，但要放到支撑起整个 Spring 中 IOC、AOP 特性时，就会变得复杂一些，整个处理 Spring 循环依赖的过程如下；</p>
<p><img src="https://bugstack.cn/assets/images/2020/interview/interview-31-5.png" alt="" loading="lazy"></p>
<ul>
<li>以上就是关于 Spring 中对于一个有循环依赖的对象获取过程，也就是你想要的<code>说说细节</code></li>
<li>乍一看是挺多流程，但是这些也基本是你在调试代码时候必须经过的代码片段，拿到这份执行流程，再调试就非常方便了。</li>
</ul>
<h3 id="2-处理过程">2. 处理过程</h3>
<p>关于本章节涉及到的案例源码分析，已更新到 github：<a href="https://github.com/fuzhengwei/interview" target="_blank">https://github.com/fuzhengwei/interview</a> - interview-31</p>
<p>以下是单元测试中对AB依赖的获取Bean操作，重点在于进入 getBean 的源码跟进；</p>
<pre><code class="language-java">@Test
public void test_alias() {
    BeanFactory beanFactory = new ClassPathXmlApplicationContext("spring-config.xml");
    Bean_A bean_a = beanFactory.getBean("bean_a", Bean_A.class);
    logger.info("获取 Bean 通过别名：{}", bean_a.getBean_b());
}
</code></pre>
<p><strong>org.springframework.beans.factory.support.AbstractBeanFactory.java</strong></p>
<pre><code class="language-java">@Override
public &lt;T&gt; T getBean(String name, Class&lt;T&gt; requiredType) throws BeansException {
	return doGetBean(name, requiredType, null, false);
}
</code></pre>
<ul>
<li>从 getBean 进入后，获取 bean 的操作会进入到 doGetBean。</li>
<li>之所以这样包装一层，是因为 doGetBean 有很多不同入参的重载方法，方便外部操作。</li>
</ul>
<p><strong>doGetBean 方法</strong></p>
<pre><code class="language-java">protected &lt;T&gt; T doGetBean(
		final String name, final Class&lt;T&gt; requiredType, final Object[] args, boolean typeCheckOnly)
		throws BeansException {
	
  // 从缓存中获取 bean 实例
	Object sharedInstance = getSingleton(beanName);
	
			// mbd.isSingleton() 用于判断 bean 是否是单例模式
			if (mbd.isSingleton()) {
			  // 获取 bean 实例
				sharedInstance = getSingleton(beanName, new ObjectFactory&lt;Object&gt;() {
					@Override
					public Object getObject() throws BeansException {
						try {
						  // 创建 bean 实例，createBean 返回的 bean 实例化好的
							return createBean(beanName, mbd, args);
						}
						catch (BeansException ex) {
							destroySingleton(beanName);
							throw ex;
						}
					}
				});
				// 后续的处理操作
				bean = getObjectForBeanInstance(sharedInstance, name, beanName, mbd);
			}
			
	// ...

  // 返回 bean 实例
	return (T) bean;
}
</code></pre>
<ul>
<li>按照在源码分析的流程图中可以看到，这一部分是从 getSingleton 先判断是否有实例对象，对于第一次进入是肯定没有对象的，要继续往下走。</li>
<li>在判断 mbd.isSingleton() 单例以后，开始使用基于 ObjectFactory 包装的方式创建 createBean，进入后核心逻辑是开始执行 doCreateBean 操作。</li>
</ul>
<p><strong>doCreateBean 方法</strong></p>
<pre><code class="language-java">protected Object doCreateBean(final String beanName, final RootBeanDefinition mbd, final Object[] args)
		throws BeanCreationException {
	
	  // 创建 bean 实例，并将 bean 实例包装到 BeanWrapper 对象中返回
		instanceWrapper = createBeanInstance(beanName, mbd, args);
	
		// 添加 bean 工厂对象到 singletonFactories 缓存中
		addSingletonFactory(beanName, new ObjectFactory&lt;Object&gt;() {
			@Override
			public Object getObject() throws BeansException {
			  // 获取原始对象的早期引用，在 getEarlyBeanReference 方法中，会执行 AOP 相关逻辑。若 bean 未被 AOP 拦截，getEarlyBeanReference 原样返回 bean。
				return getEarlyBeanReference(beanName, mbd, bean);
			}
		});
		
	try {
	  // 填充属性，解析依赖关系
		populateBean(beanName, mbd, instanceWrapper);
		if (exposedObject != null) {
			exposedObject = initializeBean(beanName, exposedObject, mbd);
		}
	}
	
	// 返回 bean 实例
	return exposedObject;
}
</code></pre>
<ul>
<li>在 doCreateBean 方法中包括的内容较多，但核心主要是创建实例、加入缓存以及最终进行属性填充，属性填充就是把一个 bean 的各个属性字段涉及到的类填充进去。</li>
<li><code>createBeanInstance</code>，创建 bean 实例，并将 bean 实例包装到 BeanWrapper 对象中返回</li>
<li><code>addSingletonFactory</code>，添加 bean 工厂对象到 singletonFactories 缓存中</li>
<li><code>getEarlyBeanReference</code>，获取原始对象的早期引用，在 getEarlyBeanReference 方法中，会执行 AOP 相关逻辑。若 bean 未被 AOP 拦截，getEarlyBeanReference 原样返回 bean。</li>
<li><code>populateBean</code>，填充属性，解析依赖关系。也就是从这开始去找寻 A 实例中属性 B，紧接着去创建 B 实例，最后在返回回来。</li>
</ul>
<p><strong>getSingleton 三级缓存</strong></p>
<pre><code class="language-java">protected Object getSingleton(String beanName, boolean allowEarlyReference) {
  // 从 singletonObjects 获取实例，singletonObjects 是成品 bean
	Object singletonObject = this.singletonObjects.get(beanName);
	// 判断 beanName ，isSingletonCurrentlyInCreation 对应的 bean 是否正在创建中
	if (singletonObject == null &amp;&amp; isSingletonCurrentlyInCreation(beanName)) {
		synchronized (this.singletonObjects) {
		  // 从 earlySingletonObjects 中获取提前曝光未成品的 bean
			singletonObject = this.earlySingletonObjects.get(beanName);
			if (singletonObject == null &amp;&amp; allowEarlyReference) {
			  // 获取相应的 bean 工厂
				ObjectFactory&lt;?&gt; singletonFactory = this.singletonFactories.get(beanName);
				if (singletonFactory != null) {
				  // 提前曝光 bean 实例，主要用于解决AOP循环依赖
					singletonObject = singletonFactory.getObject();
					
					// 将 singletonObject 放入缓存中，并将 singletonFactory 从缓存中移除
					this.earlySingletonObjects.put(beanName, singletonObject);
					this.singletonFactories.remove(beanName);
				}
			}
		}
	}
	return (singletonObject != NULL_OBJECT ? singletonObject : null);
}
</code></pre>
<ul>
<li><code>singletonObjects.get(beanName)</code>，从 singletonObjects 获取实例，singletonObjects 是成品 bean</li>
<li><code>isSingletonCurrentlyInCreation</code>，判断 beanName ，isSingletonCurrentlyInCreation 对应的 bean 是否正在创建中</li>
<li><code>allowEarlyReference</code>，从 earlySingletonObjects 中获取提前曝光未成品的 bean</li>
<li><code>singletonFactory.getObject()</code>，提前曝光 bean 实例，主要用于解决AOP循环依赖</li>
</ul>
<p><strong>综上</strong>，是一个处理循环依赖的代码流程，这部分提取出来的内容主要为核心内容，并没与长篇大论的全部拆取出来，大家在调试的时候会涉及的比较多，尽可能要自己根据流程图操作调试几遍。</p>
<h3 id="3-依赖解析">3. 依赖解析</h3>
<p>综上从我们自己去尝试解决循环依赖，学习了循环依赖的核心解决原理。又分析了 Spring 解决的循环依赖的处理过程以及核心源码的分析。那么接下来我们在总结下三级缓存分别不同的处理过程，算是一个总结，也方便大家理解。</p>
<h4 id="1-一级缓存能解决吗？">1. 一级缓存能解决吗？</h4>
<p><img src="https://bugstack.cn/assets/images/2020/interview/interview-31-6.png" alt="" loading="lazy"></p>
<ul>
<li>其实只有一级缓存并不是不能解决循环依赖，就像我们自己做的例子一样。</li>
<li>但是在 Spring 中如果像我们例子里那么处理，就会变得非常麻烦，而且也可能会出现 NPE 问题。</li>
<li>所以如图按照 Spring 中代码处理的流程，我们去分析一级缓存这样存放成品 Bean 的流程中，是不能解决循环依赖的问题的。因为 A 的成品创建依赖于 B，B的成品创建又依赖于 A，当需要补全B的属性时 A 还是没有创建完，所以会出现死循环。</li>
</ul>
<h4 id="2-二级缓存能解决吗？">2. 二级缓存能解决吗？</h4>
<p><img src="https://bugstack.cn/assets/images/2020/interview/interview-31-7.png" alt="" loading="lazy"></p>
<ul>
<li>有了二级缓存其实这个事处理起来就容易了，一个缓存用于存放成品对象，另外一个缓存用于存放半成品对象。</li>
<li>A 在创建半成品对象后存放到缓存中，接下来补充 A 对象中依赖 B 的属性。</li>
<li>B 继续创建，创建的半成品同样放到缓存中，在补充对象的 A 属性时，可以从半成品缓存中获取，现在 B 就是一个完整对象了，而接下来像是递归操作一样 A 也是一个完整对象了。</li>
</ul>
<h4 id="3-三级缓存解决什么？">3. 三级缓存解决什么？</h4>
<p><img src="https://bugstack.cn/assets/images/2020/interview/interview-31-8.png" alt="" loading="lazy"></p>
<ul>
<li>有了二级缓存都能解决 Spring 依赖了，怎么要有三级缓存呢。其实我们在前面分析源码时也提到过，三级缓存主要是解决 Spring AOP 的特性。AOP 本身就是对方法的增强，是 <code>ObjectFactory&lt;?&gt;</code> 类型的 lambda 表达式，而 Spring 的原则又不希望将此类类型的 Bean 前置创建，所以要存放到三级缓存中处理。</li>
<li>其实整体处理过程类似，唯独是 B 在填充属性 A 时，先查询成品缓存、再查半成品缓存，最后在看看有没有单例工程类在三级缓存中。最终获取到以后调用 getObject 方法返回代理引用或者原始引用。</li>
<li>至此也就解决了 Spring AOP 所带来的三级缓存问题。<em>本章节涉及到的 AOP 依赖有源码例子，可以进行调试</em></li>
</ul>
<h2 id="五、总结">五、总结</h2>
<ul>
<li>回顾本文基本以实际操作的例子开始，引导大家对循环依赖有一个整体的认识，也对它的解决方案可以上手的例子，这样对后续的关于 Spring 对循环依赖的解决也就不会那么陌生了。</li>
<li>通篇全文下来大家也可以看到，三级缓存并不是非必须不可，只不过在满足 Spring 自身创建的原则下，是必须的。如果你可以下载 Spring 源码对这部分代码进行改动下，提前创建 AOP 对象保存到缓存中，那么二级缓存一样可以解决循环依赖问题。</li>
<li>关于循环依赖可能并不是一个好的编码方式，如果在自己的程序中还是要尽可能使用更合理的设计模式规避循环依赖，可能这些方式会增加代码量，但在维护上会更加方便。<em>当然这不是强制，可以根据你的需要而来。</em></li>
</ul>
<h2 id="六、系列推荐">六、系列推荐</h2>
<ul>
<li><a href="https://bugstack.cn/interview/2021/03/30/%E9%9D%A2%E7%BB%8F%E6%89%8B%E5%86%8C-%E7%AC%AC28%E7%AF%87-%E4%BD%A0%E8%AF%B4-%E6%80%8E%E4%B9%88%E6%8A%8ABean%E5%A1%9E%E5%88%B0Spring%E5%AE%B9%E5%99%A8.html" target="_blank">你说，怎么把Bean塞到Spring容器？</a></li>
<li><a href="https://bugstack.cn/interview/2021/04/07/%E9%9D%A2%E7%BB%8F%E6%89%8B%E5%86%8C-%E7%AC%AC29%E7%AF%87-Spring-IOC-%E7%89%B9%E6%80%A7%E6%9C%89%E5%93%AA%E4%BA%9B-%E4%B8%8D%E4%BC%9A%E8%AF%BB%E4%B8%8D%E6%87%82%E6%BA%90%E7%A0%81.html" target="_blank">Spring IOC 特性有哪些，不会读不懂源码！</a></li>
<li><a href="https://bugstack.cn/interview/2021/04/18/%E9%9D%A2%E7%BB%8F%E6%89%8B%E5%86%8C-%E7%AC%AC30%E7%AF%87-%E5%85%B3%E4%BA%8E-Spring-%E4%B8%AD-getBean-%E7%9A%84%E5%85%A8%E6%B5%81%E7%A8%8B%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90.html" target="_blank">关于 Spring 中 getBean 的全流程源码解析</a></li>
<li><a href="https://bugstack.cn/itstack-code-life/2021/04/22/%E4%B9%85%E7%AD%89%E4%BA%86-%E5%B0%8F%E5%82%85%E5%93%A5%E7%9A%84-%E9%87%8D%E5%AD%A6Java%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E7%BB%88%E4%BA%8E%E5%87%BA%E7%89%88%E4%BA%86-%E5%BD%A9%E5%8D%B0&amp;%E7%BA%B8%E8%B4%A8.html" target="_blank">久等了，小傅哥的《重学Java设计模式》终于出版了，彩印&amp;纸质！</a></li>
<li><a href="https://bugstack.cn/itstack-code-life/2021/04/21/%E4%B8%80%E4%B8%AABug-%E8%AE%A9%E6%88%91%E5%8F%91%E7%8E%B0%E4%BA%86-Java-%E7%95%8C%E7%9A%84.AJ(%E9%94%A5).html" target="_blank">一个Bug，让我发现了 Java 界的.AJ(锥)！</a></li>
</ul>

</div>
<div id="MySignature"></div>
<div class="clear"></div>
<div id="blog_post_info_block">
    <div id="blog_post_info"></div>
    <div class="clear"></div>
    <div id="post_next_prev"></div>
</div>
            </div>
            <div class="postDesc">posted @ 
<span id="post-date">2021-05-06 08:13</span>&nbsp;
<a href="https://www.cnblogs.com/xiaofuge/">小傅哥</a>&nbsp;
阅读(<span id="post_view_count">161</span>)&nbsp;
评论(<span id="post_comment_count">0</span>)&nbsp;
<a href="https://i.cnblogs.com/EditPosts.aspx?postid=14733687" rel="nofollow">编辑</a>&nbsp;
<a href="javascript:void(0)" onclick="AddToWz(14733687);return false;">收藏</a></div>
        </div>
	    
	    
    </div><!--end: topics 文章、评论容器-->
</div>
<script src="https://common.cnblogs.com/highlight/10.3.1/highlight.min.js"></script>
<script>markdown_highlight();</script>
<script>
    var allowComments = true, cb_blogId = 601977, cb_blogApp = 'xiaofuge', cb_blogUserGuid = 'a0731ac4-2ec5-4419-dfcf-08d7f1c799c8';
    var cb_entryId = 14733687, cb_entryCreatedDate = '2021-05-06 08:13', cb_postType = 1;
    updatePostStats(
        [cb_entryId],
        function(id, count) { $("#post_view_count").text(count) },
        function(id, count) { $("#post_comment_count").text(count) })
    zoomManager.apply("#cnblogs_post_body img:not(.code_img_closed):not(.code_img_opened)");
</script>
<a name="!comments"></a>
<div id="blog-comments-placeholder"></div>
<div id="comment_form" class="commentform">
    <a name="commentform"></a>
    <div id="divCommentShow"></div>
    <div id="comment_nav"><span id="span_refresh_tips"></span><a href="javascript:void(0);" onclick="return RefreshCommentList();" id="lnk_RefreshComments" runat="server" clientidmode="Static">刷新评论</a><a href="#" onclick="return RefreshPage();">刷新页面</a><a href="#top">返回顶部</a></div>
    <div id="comment_form_container"></div>
    <div class="ad_text_commentbox" id="ad_text_under_commentbox"></div>
    <div id="ad_t2"></div>
    <div id="opt_under_post"></div>
    <div id="cnblogs_c1" class="under-post-card">
        <div id='div-gpt-ad-1592365906576-0' style='width: 300px; height: 250px;'></div>
    </div>
    <div id="under_post_card1"></div>
    <div id="cnblogs_c2" class="under-post-card">
        <div id='div-gpt-ad-1592366332455-0' style='width: 468px; height: 60px;'></div>
    </div>
    <div id="under_post_card2"></div>
    <div id="HistoryToday" class="under-post-card"></div>
    <script type="text/javascript">
       var commentManager = new blogCommentManager();
       commentManager.renderComments(0);
       fixPostBody();
       deliverBigBanner();
setTimeout(function() { incrementViewCount(cb_entryId); }, 50);       deliverT2();
       deliverC1C2();
       loadNewsAndKb();
       loadBlogSignature();
LoadPostCategoriesTags(cb_blogId, cb_entryId);       LoadPostInfoBlock(cb_blogId, cb_entryId, cb_blogApp, cb_blogUserGuid);
       GetPrevNextPost(cb_entryId, cb_blogId, cb_entryCreatedDate, cb_postType);
       loadOptUnderPost();
       GetHistoryToday(cb_blogId, cb_blogApp, cb_entryCreatedDate);
    </script>
</div>

	</div><!--end: forFlow -->
	</div><!--end: mainContent 主体内容容器-->
	<div id="sideBar">
		<div id="sideBarMain">
			<div id="sidebar_news" class="newsItem">
            <script>loadBlogNews();</script>
</div>
<div id="sidebar_c3"></div>
			<div id="blog-calendar" style="display:none"></div><script>loadBlogDefaultCalendar();</script>			
			<div id="leftcontentcontainer">
				<div id="blog-sidecolumn"></div>
                    <script>loadBlogSideColumn();</script>
			</div>			
		</div><!--end: sideBarMain -->
	</div><!--end: sideBar 侧边栏容器 -->
	<div class="clear"></div>
	</div><!--end: main -->
	<div class="clear"></div>
	<div id="footer">
		<!--done-->
Copyright &copy; 2021 小傅哥
<br /><span id="poweredby">Powered by .NET 5.0 on Kubernetes</span>



	</div><!--end: footer -->
</div><!--end: home 自定义的最大容器 -->


    

    <input type="hidden" id="antiforgery_token" value="CfDJ8L-rpLgFVEJMgssCVvNUAjucM5aSOEqruPVxlLkzngdNUz3SQnsCRqFh-Q25d4Vk3DuU6LYXyPafEYQDRjXtz7bs1VD3wat7nB-aO1GIzEYLjeGSaVFuLuAxRRwyLBAgey05TJ9NZLd4gqlPBlaXUeQ" />
</body>
</html>
